{"ast":null,"code":"import querystring from \"querystring\";\nimport { Buffer } from \"buffer\";\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst client_id = \"0c99499a79144a53a75b7c51a9b8c4c9\";\nconst client_secret = \"d81ef045e9334706b3c59ecfa35874d3\";\nconst refresh_token = \"AQCNTV33SgFKs6rtJ8hdEmy7n6ZUsyxVhEO_hKxNAAzasROY5akonwzacz1kgXTFYyqAEneAOiVWdFaWMuUPPZckTcEWqMGmJku81mMXn8fDOCW5CQBEPPgB21Lh18Tgy1M\";\nconst getAccessToken = async (client_id, client_secret, refresh_token) => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`, 'utf-8').toString(\"base64\");\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token\n    })\n  });\n  return response.json();\n};\nexport const getNowPlaying = async () => {\n  const {\n    access_token\n  } = await getAccessToken(client_id, client_secret, refresh_token);\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\nexport default async function getNowPlayingItem() {\n  const response = await getNowPlaying();\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n  const song = await response.json();\n  const albumImageUrl = song.item.album.images[0].url;\n  const artist = song.item.artists.map(_artist => _artist.name).join(\", \");\n  const isPlaying = song.is_playing;\n  const songUrl = song.item.external_urls.spotify;\n  const title = song.item.name;\n  return {\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title\n  };\n}","map":{"version":3,"names":["querystring","Buffer","NOW_PLAYING_ENDPOINT","TOKEN_ENDPOINT","client_id","client_secret","refresh_token","getAccessToken","basic","from","toString","response","fetch","method","headers","Authorization","body","stringify","grant_type","json","getNowPlaying","access_token","getNowPlayingItem","status","song","albumImageUrl","item","album","images","url","artist","artists","map","_artist","name","join","isPlaying","is_playing","songUrl","external_urls","spotify","title"],"sources":["C:/Users/opc/Desktop/spotify-currently-playing/src/spotify/SpotifyAPI.js"],"sourcesContent":["import querystring from \"querystring\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\r\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\r\n\r\nconst client_id = \"0c99499a79144a53a75b7c51a9b8c4c9\";\r\nconst client_secret = \"d81ef045e9334706b3c59ecfa35874d3\";\r\nconst refresh_token = \"AQCNTV33SgFKs6rtJ8hdEmy7n6ZUsyxVhEO_hKxNAAzasROY5akonwzacz1kgXTFYyqAEneAOiVWdFaWMuUPPZckTcEWqMGmJku81mMXn8fDOCW5CQBEPPgB21Lh18Tgy1M\";\r\n\r\nconst getAccessToken = async (client_id, client_secret, refresh_token) => {\r\n  const basic = Buffer.from(`${client_id}:${client_secret}`, 'utf-8').toString(\"base64\");\r\n\r\n  const response = await fetch(TOKEN_ENDPOINT, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Basic ${basic}`,\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    },\r\n    body: querystring.stringify({\r\n      grant_type: \"refresh_token\",\r\n      refresh_token,\r\n    }),\r\n  });\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getNowPlaying = async () => {\r\n  const { access_token } = await getAccessToken(client_id, client_secret, refresh_token);\r\n\r\n  return fetch(NOW_PLAYING_ENDPOINT, {\r\n    headers: {\r\n      Authorization: `Bearer ${access_token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport default async function getNowPlayingItem() {\r\n  const response = await getNowPlaying();\r\n  if (response.status === 204 || response.status > 400) {\r\n    return false;\r\n  }\r\n\r\n  const song = await response.json();\r\n  const albumImageUrl = song.item.album.images[0].url;\r\n  const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\r\n  const isPlaying = song.is_playing;\r\n  const songUrl = song.item.external_urls.spotify;\r\n  const title = song.item.name;\r\n\r\n  return {\r\n    albumImageUrl,\r\n    artist,\r\n    isPlaying,\r\n    songUrl,\r\n    title,\r\n  };\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AACrC,SAASC,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,oBAAoB,GAAI,wDAAuD;AACrF,MAAMC,cAAc,GAAI,wCAAuC;AAE/D,MAAMC,SAAS,GAAG,kCAAkC;AACpD,MAAMC,aAAa,GAAG,kCAAkC;AACxD,MAAMC,aAAa,GAAG,qIAAqI;AAE3J,MAAMC,cAAc,GAAG,MAAAA,CAAOH,SAAS,EAAEC,aAAa,EAAEC,aAAa,KAAK;EACxE,MAAME,KAAK,GAAGP,MAAM,CAACQ,IAAI,CAAE,GAAEL,SAAU,IAAGC,aAAc,EAAC,EAAE,OAAO,CAAC,CAACK,QAAQ,CAAC,QAAQ,CAAC;EAEtF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,cAAc,EAAE;IAC3CU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAG,SAAQP,KAAM,EAAC;MAC/B,cAAc,EAAE;IAClB,CAAC;IACDQ,IAAI,EAAEhB,WAAW,CAACiB,SAAS,CAAC;MAC1BC,UAAU,EAAE,eAAe;MAC3BZ;IACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAOK,QAAQ,CAACQ,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAM;IAAEC;EAAa,CAAC,GAAG,MAAMd,cAAc,CAACH,SAAS,EAAEC,aAAa,EAAEC,aAAa,CAAC;EAEtF,OAAOM,KAAK,CAACV,oBAAoB,EAAE;IACjCY,OAAO,EAAE;MACPC,aAAa,EAAG,UAASM,YAAa;IACxC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,eAAe,eAAeC,iBAAiBA,CAAA,EAAG;EAChD,MAAMX,QAAQ,GAAG,MAAMS,aAAa,CAAC,CAAC;EACtC,IAAIT,QAAQ,CAACY,MAAM,KAAK,GAAG,IAAIZ,QAAQ,CAACY,MAAM,GAAG,GAAG,EAAE;IACpD,OAAO,KAAK;EACd;EAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,MAAMM,aAAa,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG;EACnD,MAAMC,MAAM,GAAGN,IAAI,CAACE,IAAI,CAACK,OAAO,CAACC,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1E,MAAMC,SAAS,GAAGZ,IAAI,CAACa,UAAU;EACjC,MAAMC,OAAO,GAAGd,IAAI,CAACE,IAAI,CAACa,aAAa,CAACC,OAAO;EAC/C,MAAMC,KAAK,GAAGjB,IAAI,CAACE,IAAI,CAACQ,IAAI;EAE5B,OAAO;IACLT,aAAa;IACbK,MAAM;IACNM,SAAS;IACTE,OAAO;IACPG;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}