{"ast":null,"code":"import querystring from \"querystring\";\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst client_id = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.REACT_APP_SPOTIFY_REFRESH_TOKEN;\n\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token\n    })\n  });\n  return response.json();\n};\n\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n  const {\n    access_token\n  } = await getAccessToken(client_id, client_secret, refresh_token);\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\nexport default async function getNowPlayingItem(client_id, client_secret, refresh_token) {\n  const response = await getNowPlaying(client_id, client_secret, refresh_token);\n\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n\n  const song = await response.json();\n  const albumImageUrl = song.item.album.images[0].url;\n  const artist = song.item.artists.map(_artist => _artist.name).join(\", \");\n  const isPlaying = song.is_playing;\n  const songUrl = song.item.external_urls.spotify;\n  const title = song.item.name;\n  return {\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title\n  };\n}","map":{"version":3,"sources":["/Users/steve/Desktop/repos/spotify-currently-playing/src/spotify/SpotifyAPI.js"],"names":["querystring","NOW_PLAYING_ENDPOINT","TOKEN_ENDPOINT","client_id","process","env","REACT_APP_SPOTIFY_CLIENT_ID","client_secret","REACT_APP_SPOTIFY_CLIENT_SECRET","refresh_token","REACT_APP_SPOTIFY_REFRESH_TOKEN","getAccessToken","basic","Buffer","from","toString","response","fetch","method","headers","Authorization","body","stringify","grant_type","json","getNowPlaying","access_token","getNowPlayingItem","status","song","albumImageUrl","item","album","images","url","artist","artists","map","_artist","name","join","isPlaying","is_playing","songUrl","external_urls","spotify","title"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,aAAxB;AAEA,MAAMC,oBAAoB,GAAI,wDAA9B;AACA,MAAMC,cAAc,GAAI,wCAAxB;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,2BAA9B;AACA,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAR,CAAYG,+BAAlC;AACA,MAAMC,aAAa,GAAGL,OAAO,CAACC,GAAR,CAAYK,+BAAlC;;AAEA,MAAMC,cAAc,GAAG,YAAY;AACjC,QAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAa,GAAEX,SAAU,IAAGI,aAAc,EAA1C,EAA6CQ,QAA7C,CAAsD,QAAtD,CAAd;AAEA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACf,cAAD,EAAiB;AAC3CgB,IAAAA,MAAM,EAAE,MADmC;AAE3CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,SAAQR,KAAM,EADvB;AAEP,sBAAgB;AAFT,KAFkC;AAM3CS,IAAAA,IAAI,EAAErB,WAAW,CAACsB,SAAZ,CAAsB;AAC1BC,MAAAA,UAAU,EAAE,eADc;AAE1Bd,MAAAA;AAF0B,KAAtB;AANqC,GAAjB,CAA5B;AAYA,SAAOO,QAAQ,CAACQ,IAAT,EAAP;AACD,CAhBD;;AAkBA,OAAO,MAAMC,aAAa,GAAG,OAAOtB,SAAP,EAAkBI,aAAlB,EAAiCE,aAAjC,KAAmD;AAC9E,QAAM;AAAEiB,IAAAA;AAAF,MAAmB,MAAMf,cAAc,CAC3CR,SAD2C,EAE3CI,aAF2C,EAG3CE,aAH2C,CAA7C;AAMA,SAAOQ,KAAK,CAAChB,oBAAD,EAAuB;AACjCkB,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASM,YAAa;AAD/B;AADwB,GAAvB,CAAZ;AAKD,CAZM;AAcP,eAAe,eAAeC,iBAAf,CACbxB,SADa,EAEbI,aAFa,EAGbE,aAHa,EAIb;AACA,QAAMO,QAAQ,GAAG,MAAMS,aAAa,CAACtB,SAAD,EAAYI,aAAZ,EAA2BE,aAA3B,CAApC;;AACA,MAAIO,QAAQ,CAACY,MAAT,KAAoB,GAApB,IAA2BZ,QAAQ,CAACY,MAAT,GAAkB,GAAjD,EAAsD;AACpD,WAAO,KAAP;AACD;;AAED,QAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACQ,IAAT,EAAnB;AACA,QAAMM,aAAa,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BC,GAAhD;AACA,QAAMC,MAAM,GAAGN,IAAI,CAACE,IAAL,CAAUK,OAAV,CAAkBC,GAAlB,CAAuBC,OAAD,IAAaA,OAAO,CAACC,IAA3C,EAAiDC,IAAjD,CAAsD,IAAtD,CAAf;AACA,QAAMC,SAAS,GAAGZ,IAAI,CAACa,UAAvB;AACA,QAAMC,OAAO,GAAGd,IAAI,CAACE,IAAL,CAAUa,aAAV,CAAwBC,OAAxC;AACA,QAAMC,KAAK,GAAGjB,IAAI,CAACE,IAAL,CAAUQ,IAAxB;AAEA,SAAO;AACLT,IAAAA,aADK;AAELK,IAAAA,MAFK;AAGLM,IAAAA,SAHK;AAILE,IAAAA,OAJK;AAKLG,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import querystring from \"querystring\";\n\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\n\nconst client_id = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.REACT_APP_SPOTIFY_REFRESH_TOKEN;\n\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n  const { access_token } = await getAccessToken(\n    client_id,\n    client_secret,\n    refresh_token\n  );\n\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n\nexport default async function getNowPlayingItem(\n  client_id,\n  client_secret,\n  refresh_token\n) {\n  const response = await getNowPlaying(client_id, client_secret, refresh_token);\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n\n  const song = await response.json();\n  const albumImageUrl = song.item.album.images[0].url;\n  const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\n  const isPlaying = song.is_playing;\n  const songUrl = song.item.external_urls.spotify;\n  const title = song.item.name;\n\n  return {\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}